fs = require \fs

request = require \request

files = require \./files
files.clear!
{Cards, Sets} = files

{raw} = require \../../data

go = (raw) ->
  raw.TSP.cards = <>concat raw.TSB.cards
  delete raw.TSB

  raw.PLC.booster = [\common] * 11
  raw.FUT.booster = [\common] * 11

  raw.UGL.cards = for card of <>
    if !/token card/test card.name
      card

  raw.CNS.cards = for card of <>
    if !/draft/test card.text
      card

  for card of raw.VMA.cards
    if card.rarity is \Bonus
      card.rarity = \Special

  # https://github.com/Sembiance/mtgjson/issues/14
  raw.VMA.booster = [\common] * 10

  rawSets = for setCode, rawSet in raw
    if rawSet.type of <[ core expansion commander planechase starter un ]>
      rawSet
  rawSets.push ...raw<[HHO MMA VMA]>

  for rawSet of rawSets
    cards = []
    split = []
    prev = null

    for rawCard of rawSet.cards
      if rawCard.layout of <[ double-faced flip ]>
      and rawCard.number[* - 1] is \b
        continue

      {colors, multiverseid, name, rarity} = rawCard

      rarity .= toLowerCase!
      if rarity is 'basic land'
        continue
      if rarity is 'mythic rare'
        rarity = \mythic

      if name is prev
        continue # alt art
      prev = name

      if rawCard.layout is \split
        name = rawCard.names.join ' // '

      url = "http://mtgimage.com/multiverseid/#{multiverseid}.jpg"

      color =
        if !colors
          \A
        else if colors.length > 1
          \Y
        else if colors.0 is \Blue
          \U
        else
          colors.0.0

      card = { color, name, rarity, url }
        <<<< rawCard{ cost: manaCost, cmc, text, type }
      card.cmc or= 0

      if rawCard.layout is \split
        split.push card
      else
        cards.push card

    join = {}
    for splitCard of split
      {name} = splitCard
      card = join[name]

      if !card
        join[name] = splitCard
        cards.push splitCard
        continue

      card.cmc  += splitCard.cmc
      card.text += "\n\n//\n\n#{splitCard.text}"
      card.cost += " // #{splitCard.cost}"

      if card.color is not splitCard.color
        card.color = \Y

    size = 0
    if rawSet.booster
      size = (x if x is \common for x of that)length
    files.add rawSet.code, cards, size

  for card of raw.HHO.cards
    # these cards have no multiverse id
    {name} = card
    lc = (card.names?join(' // ') or name)toLowerCase!
    Cards[lc]set.HHO.url = "http://mtgimage.com/card/#name.jpg"

  delete Sets.UNH.special # 1 card, useless 'super secret tech'

  Sets.ISD.special =
    common: []
    uncommon: []
    rare: []
    mythic: []

  for card of raw.ISD.cards
    if (card.layout is \double-faced) and card.number[* - 1] is \a
      {name, rarity} = card
      name .= toLowerCase!
      rarity .= toLowerCase!
      if rarity is 'mythic rare'
        rarity = \mythic
      Sets.ISD.special[rarity]push name

  {DGM} = Sets
  DGM.special =
    gate:
      'azorius guildgate'
      'boros guildgate'
      'dimir guildgate',
      'golgari guildgate'
      'gruul guildgate'
      'izzet guildgate'
      'orzhov guildgate'
      'rakdos guildgate'
      'selesnya guildgate'
      'simic guildgate'
    shock:
      'blood crypt'
      'breeding pool'
      'godless shrine'
      'hallowed fountain'
      'overgrown tomb'
      'sacred foundry'
      'steam vents'
      'stomping ground'
      'temple garden'
      'watery grave'
      "maze's end"
  DGM.common = for name of <> => name unless name of DGM.special.gate
  DGM.mythic = for name of <> => name unless name is "maze's end"
  for name of DGM.special.shock
    {set} = Cards[name]
    last = Object.keys(set)[* - 1]
    set.DGM = set[last]

  {CNS} = Sets
  CNS.special =
    common: []
    uncommon: []
    rare: []

  for rarity of <[ common uncommon rare ]>
    normal = []

    for name of CNS[rarity]
      if Cards[name]type is \Conspiracy
        CNS.special[rarity]push name
      else
        normal.push name

    CNS[rarity] = normal

  files.write!

if raw
  go raw
else
  (err, res, body) <- request \http://mtgjson.com/json/AllSets.json
  throw err if err
  raw = JSON.parse body
  go raw
